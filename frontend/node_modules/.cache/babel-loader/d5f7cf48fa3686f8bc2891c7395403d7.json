{"ast":null,"code":"var _jsxFileName = \"/Users/jordanblane/Desktop/watchou/frontend/src/channel.js\";\nimport React from 'react';\nimport './CSS/login.css';\n\nvar cryptoJs = require('crypto-js');\n\nconst queryString = require('query-string');\n\nconst hostname = window.location.hostname;\nexport class ChannelPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.Init = () => {\n      //if user is logged in redirect\n      let token = decodeURIComponent(document.cookie);\n\n      if (token) {\n        token = token.split('=');\n        token = token[1];\n        var message = {\n          token: process.env.SECRET_TOKEN_CODE\n        };\n        var cipher = cryptoJs.AES.encrypt(JSON.stringify(message), process.env.SECRET_TOKEN_CODE).toString();\n        cipher = cipher.replace(/[/]/g, '★');\n        cipher = cipher.replace(/[+]/g, '☆');\n        fetch(`http://${hostname}:4000/api/getuser?token=${process.env.REACT_APP_SECRET_TOKEN_CODE}&data=${token}`).then(response => response.json()).then(data => {\n          var d = data.data;\n          d = d.replace(/[★]/g, '/');\n          d = d.replace(/[☆]/g, '+');\n          var b = cryptoJs.AES.decrypt(d, process.env.REACT_APP_SECRET_TOKEN_CODE.toString());\n          var dec = JSON.parse(b.toString(cryptoJs.enc.Utf8));\n          this.setState({\n            user: dec.user\n          });\n          var query = queryString.parse(window.location.search);\n\n          if (query.channel) {\n            fetch(`http://${hostname}:4000/api/getuser?token=${process.env.REACT_APP_SECRET_TOKEN_CODE}&data=${query.channel}`);\n          } else {\n            this.setState({\n              channel: this.state.user\n            });\n          }\n        });\n      }\n    };\n\n    this.state = {\n      user: {},\n      channel: ''\n    };\n    this.Init.bind(this);\n    this.Init();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"channelPageWrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/jordanblane/Desktop/watchou/frontend/src/channel.js"],"names":["React","cryptoJs","require","queryString","hostname","window","location","ChannelPage","Component","constructor","props","Init","token","decodeURIComponent","document","cookie","split","message","process","env","SECRET_TOKEN_CODE","cipher","AES","encrypt","JSON","stringify","toString","replace","fetch","REACT_APP_SECRET_TOKEN_CODE","then","response","json","data","d","b","decrypt","dec","parse","enc","Utf8","setState","user","query","search","channel","state","bind","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './CSS/login.css'\nvar cryptoJs = require('crypto-js');\nconst queryString = require('query-string');\nconst hostname = window.location.hostname;\n\n\nexport class ChannelPage extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state={\n        user:{},\n        channel:''\n    }\n\n    this.Init.bind(this);\n    this.Init();\n\n  }\n\n\n  Init = () => {\n    //if user is logged in redirect\n    let token = decodeURIComponent(document.cookie);\n    if(token){\n      token = token.split('=');\n      token = token[1];\n      var message = {token:process.env.SECRET_TOKEN_CODE}\n      var cipher = cryptoJs.AES.encrypt(JSON.stringify(message),process.env.SECRET_TOKEN_CODE).toString();\n      cipher = cipher.replace(/[/]/g,'★')\n      cipher = cipher.replace(/[+]/g,'☆')\n      fetch(`http://${hostname}:4000/api/getuser?token=${process.env.REACT_APP_SECRET_TOKEN_CODE}&data=${token}`)\n      .then(response => response.json())\n      .then(data => {\n        var d = data.data\n        d = d.replace(/[★]/g,'/')\n        d = d.replace(/[☆]/g,'+')\n        var b = cryptoJs.AES.decrypt(d,process.env.REACT_APP_SECRET_TOKEN_CODE.toString())\n        var dec = JSON.parse(b.toString(cryptoJs.enc.Utf8))\n        this.setState({user : dec.user})\n        var query = queryString.parse(window.location.search);\n        if(query.channel)\n        {\n\n            fetch(`http://${hostname}:4000/api/getuser?token=${process.env.REACT_APP_SECRET_TOKEN_CODE}&data=${query.channel}`)\n        }\n        else\n        {\n          this.setState({channel : this.state.user})\n        }\n      })\n    }\n  }\n\n\n  render(){\n    return(\n        <div className=\"channelPageWrapper\">\n\n        </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}